{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "AppLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-app"
      }
    },
    "SwaggerDocsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-swaggerDocs"
      }
    },
    "CreateAppointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-createAppointment"
      }
    },
    "GetAppointmentsByInsuredIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-getAppointmentsByInsuredId"
      }
    },
    "AppointmentPELogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-appointmentPE"
      }
    },
    "AppointmentCLLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-appointmentCL"
      }
    },
    "ConfirmAppointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rimac-appointments-dev-confirmAppointment"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "rimac-appointments",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rimac-appointments-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rimac-appointments-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:us-east-1:*:appointment-topic-pe",
                    "arn:aws:sns:us-east-1:*:appointment-topic-cl"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AppointmentQueuePE",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AppointmentQueueCL",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AppointmentConfirmationQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "rimac-appointments",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AppLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/server.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-app",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppLogGroup"
      ]
    },
    "SwaggerDocsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/server.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-swaggerDocs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SwaggerDocsLogGroup"
      ]
    },
    "CreateAppointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/handlers/appointment.createAppointment",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-createAppointment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAppointmentLogGroup"
      ]
    },
    "GetAppointmentsByInsuredIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/handlers/appointment.getAppointmentsByInsuredId",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-getAppointmentsByInsuredId",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAppointmentsByInsuredIdLogGroup"
      ]
    },
    "AppointmentPELambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/interfaces/events/SqsHandlers.handleAppointmentPE",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-appointmentPE",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentPELogGroup"
      ]
    },
    "AppointmentCLLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/interfaces/events/SqsHandlers.handleAppointmentCL",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-appointmentCL",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentCLLogGroup"
      ]
    },
    "ConfirmAppointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
          "S3Key": "serverless/rimac-appointments/dev/1754346868504-2025-08-04T22:34:28.504Z/rimac-appointments.zip"
        },
        "Handler": "src/interfaces/events/ConfirmationHandler.handle",
        "Runtime": "nodejs18.x",
        "FunctionName": "rimac-appointments-dev-confirmAppointment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "APPOINTMENTS_TABLE": "Appointments",
            "SNS_TOPIC_PE": {
              "Ref": "AppointmentTopicPE"
            },
            "SNS_TOPIC_CL": {
              "Ref": "AppointmentTopicCL"
            },
            "RDS_HOST": "mysql-pe.ceha8qs8kmt9.us-east-1.rds.amazonaws.com",
            "RDS_PORT": "3306",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Danivicr093",
            "RDS_DATABASE": "mysqle_pe",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConfirmAppointmentLogGroup"
      ]
    },
    "AppLambdaVersion5LbKCNNefSvt6FWavJBhz07OWkWIlzCd2eXjpSM6I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppLambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "SwaggerDocsLambdaVersionjcJypaPzCOC46Kr6GhIE9XLTj330zXLLkHMzFbPru8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SwaggerDocsLambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "CreateAppointmentLambdaVersionx9HnRu87cN8fb4wTiGe143I1RVtvKA74FCWPOYXRDQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAppointmentLambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "GetAppointmentsByInsuredIdLambdaVersionT07oiteaPD1i9Iko9jB3soyVv0TnQd4iwmgkarEg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAppointmentsByInsuredIdLambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "AppointmentPELambdaVersionEFfuxqvY7nKKVOWJVGiVfxddPCfwqvNh69JiDTh4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentPELambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "AppointmentCLLambdaVersion3tXW465UHs7wV9g8SRkQnUpCIh6iD9t7rEEp7j1J808": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentCLLambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "ConfirmAppointmentLambdaVersionjBqCAFKjvFbVc5Yjp8dcyLnXStFisPH5UDCWdkCbf8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConfirmAppointmentLambdaFunction"
        },
        "CodeSha256": "LSFmsmVqHBAWAATA/eipMLCLvD4fjD6UqzH1SsDErhU="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-rimac-appointments",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAppointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAppointmentsInsuredidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "PathPart": "{insuredId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDocs": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "docs",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsInsuredidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointmentsInsuredidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDocsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDocs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateAppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateAppointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAppointmentsInsuredidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointmentsInsuredidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAppointmentsByInsuredIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAppointmentsByInsuredIdLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDocsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDocs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SwaggerDocsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SwaggerDocsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1754346858539": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAppointmentsInsuredidVarOptions",
        "ApiGatewayMethodAppointmentsOptions",
        "ApiGatewayMethodDocsOptions",
        "ApiGatewayMethodAppointmentsPost",
        "ApiGatewayMethodAppointmentsInsuredidVarGet",
        "ApiGatewayMethodDocsGet",
        "ApiGatewayMethodAppointmentsPost",
        "ApiGatewayMethodDocsGet",
        "ApiGatewayMethodAppointmentsPost",
        "ApiGatewayMethodAppointmentsInsuredidVarGet"
      ]
    },
    "AppLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AppLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SwaggerDocsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SwaggerDocsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateAppointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAppointmentsByInsuredIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAppointmentsByInsuredIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AppointmentPEEventSourceMappingSQSAppointmentQueuePE": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentQueuePE",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentPELambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentCLEventSourceMappingSQSAppointmentQueueCL": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentQueueCL",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentCLLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "ConfirmAppointmentEventSourceMappingSQSAppointmentConfirmationQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentConfirmationQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ConfirmAppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Appointments",
        "AttributeDefinitions": [
          {
            "AttributeName": "insuredId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "scheduleId",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "insuredId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "scheduleId",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AppointmentTopicPE": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "appointment-topic-pe"
      }
    },
    "AppointmentTopicCL": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "appointment-topic-cl"
      }
    },
    "AppointmentQueuePE": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "appointment-queue-pe"
      }
    },
    "AppointmentQueuePEPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentQueuePE"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentQueuePE",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentTopicPE"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SNSSubscriptionPE": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "AppointmentTopicPE"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "AppointmentQueuePE",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "PE"
          ]
        }
      }
    },
    "AppointmentQueueCL": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "appointment-queue-cl"
      }
    },
    "AppointmentQueueCLPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentQueueCL"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentQueueCL",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentTopicCL"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SNSSubscriptionCL": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "AppointmentTopicCL"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "AppointmentQueueCL",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "CL"
          ]
        }
      }
    },
    "AppointmentConfirmationQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "appointment-confirmation-queue"
      }
    },
    "AppointmentConfirmationQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentConfirmationQueue"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentConfirmationQueue",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": "arn:aws:events:us-east-1:257505038232:rule/appointment-completed-rule"
                }
              }
            }
          ]
        }
      }
    },
    "AppointmentCompletedRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": "appointment-completed-rule",
        "EventPattern": {
          "source": [
            "appointment.service"
          ],
          "detail-type": [
            "AppointmentCompleted"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AppointmentConfirmationQueue",
                "Arn"
              ]
            },
            "Id": "SendToConfirmationQueue"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-1b97e2bd-fcd0",
      "Export": {
        "Name": "sls-rimac-appointments-dev-ServerlessDeploymentBucketName"
      }
    },
    "AppLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppLambdaVersion5LbKCNNefSvt6FWavJBhz07OWkWIlzCd2eXjpSM6I"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-AppLambdaFunctionQualifiedArn"
      }
    },
    "SwaggerDocsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SwaggerDocsLambdaVersionjcJypaPzCOC46Kr6GhIE9XLTj330zXLLkHMzFbPru8"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-SwaggerDocsLambdaFunctionQualifiedArn"
      }
    },
    "CreateAppointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAppointmentLambdaVersionx9HnRu87cN8fb4wTiGe143I1RVtvKA74FCWPOYXRDQ"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-CreateAppointmentLambdaFunctionQualifiedArn"
      }
    },
    "GetAppointmentsByInsuredIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAppointmentsByInsuredIdLambdaVersionT07oiteaPD1i9Iko9jB3soyVv0TnQd4iwmgkarEg"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-GetAppointmentsByInsuredIdLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentPELambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentPELambdaVersionEFfuxqvY7nKKVOWJVGiVfxddPCfwqvNh69JiDTh4"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-AppointmentPELambdaFunctionQualifiedArn"
      }
    },
    "AppointmentCLLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentCLLambdaVersion3tXW465UHs7wV9g8SRkQnUpCIh6iD9t7rEEp7j1J808"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-AppointmentCLLambdaFunctionQualifiedArn"
      }
    },
    "ConfirmAppointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConfirmAppointmentLambdaVersionjBqCAFKjvFbVc5Yjp8dcyLnXStFisPH5UDCWdkCbf8"
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-ConfirmAppointmentLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-rimac-appointments-dev-ServiceEndpoint"
      }
    }
  }
}